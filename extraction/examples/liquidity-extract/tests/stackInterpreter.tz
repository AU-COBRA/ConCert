/***********************************************************************
 File generated by Liquidity compiler version 2.0
 (commit 6472808c, compiled on Wed Sep 16 14:15:26 CEST 2020)
 Date: 2020-09-17 12:02:27
 From file: ./extraction/examples/liquidity-extract/tests/StackInterpreter.liq
 Options:
  - Inlining: true
  - Simplifications: true
  - Peephole optimizations: true
  - Single line output: false
  - Generate annotations: true
  - Uncurrying: true
***********************************************************************/

parameter %main
  (pair (list (or :instruction
                 (int %IPushZ)
                 (or (bool %IPushB)
                     (or (pair %IObs string int) (or :op %IOp (unit %Add) (or (unit %And) (unit %Equal)))))))
        (map (pair string int) (or :value (bool %BVal) (int %ZVal))));
storage (list (or :value (bool %BVal) (int %ZVal)));
code { DUP ;
       DIP { CDR @st_slash_1 } ;
       CAR @param_slash_2 ;
       LAMBDA @snd
         (pair (list (or :instruction
                        (int %IPushZ)
                        (or (bool %IPushB)
                            (or (pair %IObs string int) (or :op %IOp (unit %Add) (or (unit %And) (unit %Equal)))))))
               (map (pair string int) (or :value (bool %BVal) (int %ZVal))))
         (map (pair string int) (or :value (bool %BVal) (int %ZVal)))
         { RENAME @p_slash_5 ; CDR } ;
       LAMBDA @eqInt
         (pair int int)
         bool
         { RENAME @i_j_slash_23 ;
           DUP @i_j ;
           CDR @j ;
           DIP { DUP @i_j } ;
           DIP 2 { DROP } ;
           SWAP ;
           CAR @i ;
           COMPARE ;
           EQ } ;
       LAMBDA @andb
         (pair bool bool)
         bool
         { RENAME @a_b_slash_27 ;
           DUP @a_b ;
           CDR @b ;
           DIP { DUP @a_b } ;
           DIP 2 { DROP } ;
           SWAP ;
           CAR @a ;
           AND } ;
       PAIR ;
       LAMBDA @addInt
         (pair int int)
         int
         { RENAME @i_j_slash_7 ;
           DUP @i_j ;
           CDR @j ;
           DIP { DUP @i_j } ;
           DIP 2 { DROP } ;
           SWAP ;
           CAR @i ;
           ADD } ;
       PAIR ;
       LAMBDA
         (pair (pair (map (pair string int) (or :value (bool %BVal) (int %ZVal)))
                     (pair (list (or :instruction
                                    (int %IPushZ)
                                    (or (bool %IPushB)
                                        (or (pair %IObs string int) (or :op %IOp (unit %Add) (or (unit %And) (unit %Equal)))))))
                           (list (or :value (bool %BVal) (int %ZVal)))))
               (pair (lambda (pair int int) int)
                     (pair (lambda (pair bool bool) bool) (lambda (pair int int) bool))))
         (option (list (or :value (bool %BVal) (int %ZVal))))
         { RENAME @_ext_insts_s__addInt_andb_eqInt_slash_31 ;
           DUP ;
           CAR ;
           LEFT (option (list (or :value (bool %BVal) (int %ZVal)))) ;
           LOOP_LEFT
             { RENAME @_ext_insts_s_slash_33 ;
               DUP ;
               CAR @ext ;
               { DIP { DUP } ; SWAP } ;
               CDDR @s ;
               { DIP 2 { DUP } ; DIG 2 } ;
               CDAR @insts ;
               IF_CONS
                 { DUP @hd ;
                   IF_LEFT
                     { RENAME @i_slash_39 ;
                       { DIP 3 { DUP @s } ; DIG 3 } ;
                       { DIP { DUP @i } ; SWAP } ;
                       RIGHT % %ZVal bool ;
                       CONS ;
                       { DIP 3 { DUP @inst_prim_ } ; DIG 3 } ;
                       PAIR ;
                       { DIP 5 { DUP @ext } ; DIG 5 } ;
                       PAIR ;
                       LEFT (option (list (or :value (bool %BVal) (int %ZVal)))) ;
                       DIP { DROP } }
                     { IF_LEFT
                         { RENAME @b_slash_40 ;
                           { DIP 3 { DUP @s } ; DIG 3 } ;
                           { DIP { DUP @b } ; SWAP } ;
                           LEFT %BVal % int ;
                           CONS ;
                           { DIP 3 { DUP @inst_prim_ } ; DIG 3 } ;
                           PAIR ;
                           { DIP 5 { DUP @ext } ; DIG 5 } ;
                           PAIR ;
                           LEFT (option (list (or :value (bool %BVal) (int %ZVal)))) ;
                           DIP { DROP } }
                         { IF_LEFT
                             { RENAME @_l_i_slash_41 ;
                               { DIP 4 { DUP @ext } ; DIG 4 } ;
                               { DIP { DUP } ; SWAP } ;
                               CDR @i ;
                               { DIP 2 { DUP } ; DIG 2 } ;
                               CAR @l ;
                               PAIR ;
                               GET ;
                               IF_NONE
                                 { NONE (list (or :value (bool %BVal) (int %ZVal))) ;
                                   RIGHT
                                     (pair (map (pair string int) (or :value (bool %BVal) (int %ZVal)))
                                           (pair (list (or :instruction
                                                          (int %IPushZ)
                                                          (or (bool %IPushB)
                                                              (or (pair %IObs string int) (or :op %IOp (unit %Add) (or (unit %And) (unit %Equal)))))))
                                                 (list (or :value (bool %BVal) (int %ZVal))))) }
                                 { { DIP 4 { DUP @s } ; DIG 4 } ;
                                   { DIP { DUP @v } ; SWAP } ;
                                   CONS ;
                                   { DIP 4 { DUP @inst_prim_ } ; DIG 4 } ;
                                   PAIR ;
                                   { DIP 6 { DUP @ext } ; DIG 6 } ;
                                   PAIR ;
                                   LEFT (option (list (or :value (bool %BVal) (int %ZVal)))) ;
                                   DIP { DROP } } ;
                               DIP { DROP } }
                             { RENAME @op_slash_45 ;
                               DUP @op ;
                               IF_LEFT
                                 { DROP ;
                                   { DIP 3 { DUP @s } ; DIG 3 } ;
                                   IF_CONS
                                     { DUP @v ;
                                       IF_LEFT
                                         { RENAME @b_slash_48 ;
                                           NONE (list (or :value (bool %BVal) (int %ZVal))) ;
                                           RIGHT
                                             (pair (map (pair string int) (or :value (bool %BVal) (int %ZVal)))
                                                   (pair (list (or :instruction
                                                                  (int %IPushZ)
                                                                  (or (bool %IPushB)
                                                                      (or (pair %IObs string int) (or :op %IOp (unit %Add) (or (unit %And) (unit %Equal)))))))
                                                         (list (or :value (bool %BVal) (int %ZVal))))) ;
                                           DIP { DROP } }
                                         { RENAME @i_slash_49 ;
                                           { DIP 2 { DUP @l } ; DIG 2 } ;
                                           IF_CONS
                                             { DUP @v0 ;
                                               IF_LEFT
                                                 { RENAME @b_slash_52 ;
                                                   NONE (list (or :value (bool %BVal) (int %ZVal))) ;
                                                   RIGHT
                                                     (pair (map (pair string int) (or :value (bool %BVal) (int %ZVal)))
                                                           (pair (list (or :instruction
                                                                          (int %IPushZ)
                                                                          (or (bool %IPushB)
                                                                              (or (pair %IObs string int) (or :op %IOp (unit %Add) (or (unit %And) (unit %Equal)))))))
                                                                 (list (or :value (bool %BVal) (int %ZVal))))) ;
                                                   DIP { DROP } }
                                                 { RENAME @j_slash_53 ;
                                                   { DIP 2 { DUP @s_prim_ } ; DIG 2 } ;
                                                   { DIP 13 { DUP } ; DIG 13 } ;
                                                   CDAR @addInt_slash_10 ;
                                                   { DIP 2 { DUP @j } ; DIG 2 } ;
                                                   { DIP 6 { DUP @i } ; DIG 6 } ;
                                                   PAIR ;
                                                   EXEC ;
                                                   RIGHT % %ZVal bool ;
                                                   CONS ;
                                                   { DIP 9 { DUP @inst_prim_ } ; DIG 9 } ;
                                                   PAIR ;
                                                   { DIP 11 { DUP @ext } ; DIG 11 } ;
                                                   PAIR ;
                                                   LEFT (option (list (or :value (bool %BVal) (int %ZVal)))) ;
                                                   DIP { DROP } } ;
                                               DIP { DROP 2 } }
                                             { NONE (list (or :value (bool %BVal) (int %ZVal))) ;
                                               RIGHT
                                                 (pair (map (pair string int) (or :value (bool %BVal) (int %ZVal)))
                                                       (pair (list (or :instruction
                                                                      (int %IPushZ)
                                                                      (or (bool %IPushB)
                                                                          (or (pair %IObs string int) (or :op %IOp (unit %Add) (or (unit %And) (unit %Equal)))))))
                                                             (list (or :value (bool %BVal) (int %ZVal))))) } ;
                                           DIP { DROP } } ;
                                       DIP { DROP 2 } }
                                     { NONE (list (or :value (bool %BVal) (int %ZVal))) ;
                                       RIGHT
                                         (pair (map (pair string int) (or :value (bool %BVal) (int %ZVal)))
                                               (pair (list (or :instruction
                                                              (int %IPushZ)
                                                              (or (bool %IPushB)
                                                                  (or (pair %IObs string int) (or :op %IOp (unit %Add) (or (unit %And) (unit %Equal)))))))
                                                     (list (or :value (bool %BVal) (int %ZVal))))) } }
                                 { IF_LEFT
                                     { DROP ;
                                       { DIP 3 { DUP @s } ; DIG 3 } ;
                                       IF_CONS
                                         { DUP @v ;
                                           IF_LEFT
                                             { RENAME @i_slash_56 ;
                                               { DIP 2 { DUP @l } ; DIG 2 } ;
                                               IF_CONS
                                                 { DUP @v0 ;
                                                   IF_LEFT
                                                     { RENAME @j_slash_59 ;
                                                       { DIP 2 { DUP @s_prim_ } ; DIG 2 } ;
                                                       { DIP 13 { DUP } ; DIG 13 } ;
                                                       CDDAR @andb_slash_30 ;
                                                       { DIP 2 { DUP @j } ; DIG 2 } ;
                                                       { DIP 6 { DUP @i } ; DIG 6 } ;
                                                       PAIR ;
                                                       EXEC ;
                                                       LEFT %BVal % int ;
                                                       CONS ;
                                                       { DIP 9 { DUP @inst_prim_ } ; DIG 9 } ;
                                                       PAIR ;
                                                       { DIP 11 { DUP @ext } ; DIG 11 } ;
                                                       PAIR ;
                                                       LEFT (option (list (or :value (bool %BVal) (int %ZVal)))) ;
                                                       DIP { DROP } }
                                                     { RENAME @z_slash_60 ;
                                                       NONE (list (or :value (bool %BVal) (int %ZVal))) ;
                                                       RIGHT
                                                         (pair (map (pair string int) (or :value (bool %BVal) (int %ZVal)))
                                                               (pair (list (or :instruction
                                                                              (int %IPushZ)
                                                                              (or (bool %IPushB)
                                                                                  (or (pair %IObs string int) (or :op %IOp (unit %Add) (or (unit %And) (unit %Equal)))))))
                                                                     (list (or :value (bool %BVal) (int %ZVal))))) ;
                                                       DIP { DROP } } ;
                                                   DIP { DROP 2 } }
                                                 { NONE (list (or :value (bool %BVal) (int %ZVal))) ;
                                                   RIGHT
                                                     (pair (map (pair string int) (or :value (bool %BVal) (int %ZVal)))
                                                           (pair (list (or :instruction
                                                                          (int %IPushZ)
                                                                          (or (bool %IPushB)
                                                                              (or (pair %IObs string int) (or :op %IOp (unit %Add) (or (unit %And) (unit %Equal)))))))
                                                                 (list (or :value (bool %BVal) (int %ZVal))))) } ;
                                               DIP { DROP } }
                                             { RENAME @z_slash_61 ;
                                               NONE (list (or :value (bool %BVal) (int %ZVal))) ;
                                               RIGHT
                                                 (pair (map (pair string int) (or :value (bool %BVal) (int %ZVal)))
                                                       (pair (list (or :instruction
                                                                      (int %IPushZ)
                                                                      (or (bool %IPushB)
                                                                          (or (pair %IObs string int) (or :op %IOp (unit %Add) (or (unit %And) (unit %Equal)))))))
                                                             (list (or :value (bool %BVal) (int %ZVal))))) ;
                                               DIP { DROP } } ;
                                           DIP { DROP 2 } }
                                         { NONE (list (or :value (bool %BVal) (int %ZVal))) ;
                                           RIGHT
                                             (pair (map (pair string int) (or :value (bool %BVal) (int %ZVal)))
                                                   (pair (list (or :instruction
                                                                  (int %IPushZ)
                                                                  (or (bool %IPushB)
                                                                      (or (pair %IObs string int) (or :op %IOp (unit %Add) (or (unit %And) (unit %Equal)))))))
                                                         (list (or :value (bool %BVal) (int %ZVal))))) } }
                                     { DROP ;
                                       { DIP 3 { DUP @s } ; DIG 3 } ;
                                       IF_CONS
                                         { DUP @v ;
                                           IF_LEFT
                                             { RENAME @b_slash_64 ;
                                               NONE (list (or :value (bool %BVal) (int %ZVal))) ;
                                               RIGHT
                                                 (pair (map (pair string int) (or :value (bool %BVal) (int %ZVal)))
                                                       (pair (list (or :instruction
                                                                      (int %IPushZ)
                                                                      (or (bool %IPushB)
                                                                          (or (pair %IObs string int) (or :op %IOp (unit %Add) (or (unit %And) (unit %Equal)))))))
                                                             (list (or :value (bool %BVal) (int %ZVal))))) ;
                                               DIP { DROP } }
                                             { RENAME @i_slash_65 ;
                                               { DIP 2 { DUP @l } ; DIG 2 } ;
                                               IF_CONS
                                                 { DUP @v0 ;
                                                   IF_LEFT
                                                     { RENAME @b_slash_68 ;
                                                       NONE (list (or :value (bool %BVal) (int %ZVal))) ;
                                                       RIGHT
                                                         (pair (map (pair string int) (or :value (bool %BVal) (int %ZVal)))
                                                               (pair (list (or :instruction
                                                                              (int %IPushZ)
                                                                              (or (bool %IPushB)
                                                                                  (or (pair %IObs string int) (or :op %IOp (unit %Add) (or (unit %And) (unit %Equal)))))))
                                                                     (list (or :value (bool %BVal) (int %ZVal))))) ;
                                                       DIP { DROP } }
                                                     { RENAME @j_slash_69 ;
                                                       { DIP 2 { DUP @s_prim_ } ; DIG 2 } ;
                                                       { DIP 13 { DUP } ; DIG 13 } ;
                                                       CDDDR @eqInt_slash_26 ;
                                                       { DIP 2 { DUP @j } ; DIG 2 } ;
                                                       { DIP 6 { DUP @i } ; DIG 6 } ;
                                                       PAIR ;
                                                       EXEC ;
                                                       LEFT %BVal % int ;
                                                       CONS ;
                                                       { DIP 9 { DUP @inst_prim_ } ; DIG 9 } ;
                                                       PAIR ;
                                                       { DIP 11 { DUP @ext } ; DIG 11 } ;
                                                       PAIR ;
                                                       LEFT (option (list (or :value (bool %BVal) (int %ZVal)))) ;
                                                       DIP { DROP } } ;
                                                   DIP { DROP 2 } }
                                                 { NONE (list (or :value (bool %BVal) (int %ZVal))) ;
                                                   RIGHT
                                                     (pair (map (pair string int) (or :value (bool %BVal) (int %ZVal)))
                                                           (pair (list (or :instruction
                                                                          (int %IPushZ)
                                                                          (or (bool %IPushB)
                                                                              (or (pair %IObs string int) (or :op %IOp (unit %Add) (or (unit %And) (unit %Equal)))))))
                                                                 (list (or :value (bool %BVal) (int %ZVal))))) } ;
                                               DIP { DROP } } ;
                                           DIP { DROP 2 } }
                                         { NONE (list (or :value (bool %BVal) (int %ZVal))) ;
                                           RIGHT
                                             (pair (map (pair string int) (or :value (bool %BVal) (int %ZVal)))
                                                   (pair (list (or :instruction
                                                                  (int %IPushZ)
                                                                  (or (bool %IPushB)
                                                                      (or (pair %IObs string int) (or :op %IOp (unit %Add) (or (unit %And) (unit %Equal)))))))
                                                         (list (or :value (bool %BVal) (int %ZVal))))) } } } ;
                               DIP { DROP } } } } ;
                   DIP { DROP 2 } }
                 { DUP @s ;
                   SOME ;
                   RIGHT
                     (pair (map (pair string int) (or :value (bool %BVal) (int %ZVal)))
                           (pair (list (or :instruction
                                          (int %IPushZ)
                                          (or (bool %IPushB)
                                              (or (pair %IObs string int) (or :op %IOp (unit %Add) (or (unit %And) (unit %Equal)))))))
                                 (list (or :value (bool %BVal) (int %ZVal))))) } ;
               DIP { DROP } ;
               DIP { DROP } ;
               DIP { DROP } } ;
           DIP { DROP } } ;
       PAIR @interp ;
       LAMBDA
         (pair (pair (map (pair string int) (or :value (bool %BVal) (int %ZVal)))
                     (pair (list (or :instruction
                                    (int %IPushZ)
                                    (or (bool %IPushB)
                                        (or (pair %IObs string int) (or :op %IOp (unit %Add) (or (unit %And) (unit %Equal)))))))
                           (list (or :value (bool %BVal) (int %ZVal)))))
               (pair (lambda
                        (pair (pair (map (pair string int) (or :value (bool %BVal) (int %ZVal)))
                                    (pair (list (or :instruction
                                                   (int %IPushZ)
                                                   (or (bool %IPushB)
                                                       (or (pair %IObs string int) (or :op %IOp (unit %Add) (or (unit %And) (unit %Equal)))))))
                                          (list (or :value (bool %BVal) (int %ZVal)))))
                              (pair (lambda (pair int int) int)
                                    (pair (lambda (pair bool bool) bool) (lambda (pair int int) bool))))
                        (option (list (or :value (bool %BVal) (int %ZVal)))))
                     (pair (lambda (pair int int) int)
                           (pair (lambda (pair bool bool) bool) (lambda (pair int int) bool)))))
         (option (list (or :value (bool %BVal) (int %ZVal))))
         { RENAME @ext_insts_s__interp_slash_71 ;
           DUP ;
           CDR @interp_slash_70 ;
           DIP { DUP } ;
           SWAP ;
           CAR @ext_insts_s_slash_72 ;
           CDDR @s ;
           DIP 2 { DUP } ;
           DIG 2 ;
           CAR @ext_insts_s_slash_72 ;
           CDAR @insts ;
           PAIR ;
           DIP 2 { DUP } ;
           DIG 2 ;
           CAR @ext_insts_s_slash_72 ;
           CAR @ext ;
           PAIR ;
           DIP { DUP ; CAR ; SWAP ; CDR } ;
           DIP 3 { DROP } ;
           PAIR ;
           EXEC } ;
       PAIR ;
       PAIR ;
       LAMBDA @fst
         (pair (list (or :instruction
                        (int %IPushZ)
                        (or (bool %IPushB)
                            (or (pair %IObs string int) (or :op %IOp (unit %Add) (or (unit %And) (unit %Equal)))))))
               (map (pair string int) (or :value (bool %BVal) (int %ZVal))))
         (list (or :instruction
                  (int %IPushZ)
                  (or (bool %IPushB)
                      (or (pair %IObs string int) (or :op %IOp (unit %Add) (or (unit %And) (unit %Equal)))))))
         { RENAME @p_slash_3 ; CAR } ;
       PAIR ;
       LAMBDA
         (pair (pair (pair (list (or :instruction
                                    (int %IPushZ)
                                    (or (bool %IPushB)
                                        (or (pair %IObs string int) (or :op %IOp (unit %Add) (or (unit %And) (unit %Equal)))))))
                           (map (pair string int) (or :value (bool %BVal) (int %ZVal))))
                     (list (or :value (bool %BVal) (int %ZVal))))
               (pair (lambda
                        (pair (list (or :instruction
                                       (int %IPushZ)
                                       (or (bool %IPushB)
                                           (or (pair %IObs string int) (or :op %IOp (unit %Add) (or (unit %And) (unit %Equal)))))))
                              (map (pair string int) (or :value (bool %BVal) (int %ZVal))))
                        (list (or :instruction
                                 (int %IPushZ)
                                 (or (bool %IPushB)
                                     (or (pair %IObs string int) (or :op %IOp (unit %Add) (or (unit %And) (unit %Equal))))))))
                     (pair (pair (lambda
                                    (pair (pair (map (pair string int) (or :value (bool %BVal) (int %ZVal)))
                                                (pair (list (or :instruction
                                                               (int %IPushZ)
                                                               (or (bool %IPushB)
                                                                   (or (pair %IObs string int) (or :op %IOp (unit %Add) (or (unit %And) (unit %Equal)))))))
                                                      (list (or :value (bool %BVal) (int %ZVal)))))
                                          (pair (lambda
                                                   (pair (pair (map (pair string int) (or :value (bool %BVal) (int %ZVal)))
                                                               (pair (list (or :instruction
                                                                              (int %IPushZ)
                                                                              (or (bool %IPushB)
                                                                                  (or (pair %IObs string int) (or :op %IOp (unit %Add) (or (unit %And) (unit %Equal)))))))
                                                                     (list (or :value (bool %BVal) (int %ZVal)))))
                                                         (pair (lambda (pair int int) int)
                                                               (pair (lambda (pair bool bool) bool) (lambda (pair int int) bool))))
                                                   (option (list (or :value (bool %BVal) (int %ZVal)))))
                                                (pair (lambda (pair int int) int)
                                                      (pair (lambda (pair bool bool) bool) (lambda (pair int int) bool)))))
                                    (option (list (or :value (bool %BVal) (int %ZVal)))))
                                 (pair (lambda
                                          (pair (pair (map (pair string int) (or :value (bool %BVal) (int %ZVal)))
                                                      (pair (list (or :instruction
                                                                     (int %IPushZ)
                                                                     (or (bool %IPushB)
                                                                         (or (pair %IObs string int) (or :op %IOp (unit %Add) (or (unit %And) (unit %Equal)))))))
                                                            (list (or :value (bool %BVal) (int %ZVal)))))
                                                (pair (lambda (pair int int) int)
                                                      (pair (lambda (pair bool bool) bool) (lambda (pair int int) bool))))
                                          (option (list (or :value (bool %BVal) (int %ZVal)))))
                                       (pair (lambda (pair int int) int)
                                             (pair (lambda (pair bool bool) bool) (lambda (pair int int) bool)))))
                           (lambda
                              (pair (list (or :instruction
                                             (int %IPushZ)
                                             (or (bool %IPushB)
                                                 (or (pair %IObs string int) (or :op %IOp (unit %Add) (or (unit %And) (unit %Equal)))))))
                                    (map (pair string int) (or :value (bool %BVal) (int %ZVal))))
                              (map (pair string int) (or :value (bool %BVal) (int %ZVal)))))))
         (option (pair (list operation) (list (or :value (bool %BVal) (int %ZVal)))))
         { RENAME @p_s__fst_interp_snd_slash_77 ;
           DUP ;
           CAR @p_s_slash_78 ;
           CAR @p ;
           DIP { DUP } ;
           SWAP ;
           CDDAR @interp_slash_76 ;
           NIL (or :value (bool %BVal) (int %ZVal)) ;
           DIP 3 { DUP } ;
           DIG 3 ;
           CDAR @fst_slash_4 ;
           DIP 3 { DUP @p } ;
           DIG 3 ;
           EXEC ;
           PAIR ;
           DIP 3 { DUP } ;
           DIG 3 ;
           CDDDR @snd_slash_6 ;
           DIP 3 { DUP @p } ;
           DIG 3 ;
           EXEC ;
           PAIR ;
           DIP { DUP ; CAR ; SWAP ; CDR } ;
           PAIR ;
           EXEC ;
           IF_NONE
             { NONE (pair (list operation) (list (or :value (bool %BVal) (int %ZVal)))) }
             { NIL operation ; PAIR ; SOME } ;
           DIP { DROP 2 } } ;
       PAIR @receive ;
       DIP 2 { DUP @st } ;
       DIG 2 ;
       DIP 2 { DUP @param } ;
       DIG 2 ;
       PAIR ;
       PAIR ;
       DUP ;
       CDR @receive_slash_83 ;
       DIP { DUP } ;
       SWAP ;
       CAR @param_st_slash_85 ;
       CDR @st ;
       DIP 2 { DUP } ;
       DIG 2 ;
       CAR @param_st_slash_85 ;
       CAR @param ;
       PAIR ;
       DIP { DUP ; CAR ; SWAP ; CDR } ;
       PAIR ;
       EXEC ;
       IF_NONE { UNIT ; FAILWITH } {} ;
       DIP { DROP 3 } };
