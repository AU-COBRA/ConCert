{-START-} 
import Basics exposing (..)
import Blockchain exposing (..)
import Bool exposing (..)
import Int exposing (..)
import Maybe exposing (..)
import Order exposing (..)
import Transaction exposing (..)
import Tuple exposing (..)


type Msg
  = Inc Int
  | Dec Int

type alias Storage = Int


type Option a
  = Some a
  | None

type Prod a b
  = Pair a b

type Sumbool
  = Left
  | Right



my_bool_dec : Bool -> Bool -> Sumbool
my_bool_dec b1 b2 =
  (case b1 of
     True ->
       \x -> case x of
               True ->
                 Left
               False ->
                 Right
     False ->
       \x -> case x of
               True ->
                 Right
               False ->
                 Left) b2

type Sig a
  = Exist a

proj1_sig : Sig a -> a
proj1_sig e =
  case e of
    Exist a ->
      a

inc_counter : Storage -> Sig Int -> Sig Storage
inc_counter st inc =
  Exist (add st (proj1_sig inc))

dec_counter : Storage -> Sig Int -> Sig Storage
dec_counter st dec =
  Exist (sub st (proj1_sig dec))

counter : Msg -> Storage -> Option (Prod Transaction Storage)
counter msg st =
  case msg of
    Inc i ->
      case my_bool_dec (lt 0 i) True of
        Left ->
          Some (Pair Transaction.none (proj1_sig (inc_counter st (Exist i))))
        Right ->
          None
    Dec i ->
      case my_bool_dec (lt 0 i) True of
        Left ->
          Some (Pair Transaction.none (proj1_sig (dec_counter st (Exist i))))
        Right ->
          None
{-END-}
