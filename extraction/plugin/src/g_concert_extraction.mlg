DECLARE PLUGIN "coq-concert-extraction.plugin"

{

open Datatypes
open Extraction_plugin
open Names
open PeanoNat.Nat
open Pp
open ResultMonad
open Stdarg

let bytes_of_list l =
  let bytes = Bytes.create (List.length l) in
  let rec fill acc = function
    | [] -> bytes
    | c :: cs ->
      Bytes.set bytes acc c;
      fill (1 + acc) cs
  in fill 0 l

(* let string_of_char_list l = Bytes.to_string (bytes_of_list l) *)
let string_of_bytestring l = Caml_bytestring.caml_string_of_bytestring l

let bytestring_of_string l = Caml_bytestring.bytestring_of_caml_string l

let char_list_of_string s = List.init (String.length s) (String.get s)

let int_of_nat =
  let rec aux acc = function
    | O -> acc
    | S n -> aux (1 + acc) n in
  aux 0

let time prefix f x =
  let start = Unix.gettimeofday () in
  let res = f x in
  let stop = Unix.gettimeofday () in
  let () =
    Feedback.msg_debug
      (Pp.str (Printf.sprintf "%s executed in: %fs" prefix (stop -. start))) in
  res

let locate_kn kn =
  let as_str = string_of_bytestring (Kernames.string_of_kername kn) in
  let qid = Libnames.qualid_of_string as_str in
  Nametab.locate qid

let should_inline kn =
  let gr = locate_kn kn in
  Table.to_inline gr && not (Table.is_custom gr)

let remap_inductive ind =
  let kn_gr = locate_kn (Kernames.inductive_mind ind) in
  match kn_gr with
  | GlobRef.IndRef (mind, _) ->
      let ip = (mind, int_of_nat (Kernames.inductive_ind ind)) in
      let gr = GlobRef.IndRef ip in

      if Table.is_custom gr then
        let na = Table.find_custom gr in
        let rec get_ctors n =
          let ctor_gr = GlobRef.ConstructRef (ip, n) in
          if Table.is_custom ctor_gr then
            let ctor_na = Table.find_custom ctor_gr in
            bytestring_of_string ctor_na :: get_ctors (1 + n)
          else
            [] in

        (* For custom matches for some reason the interface takes an array of
         * ml_branch where it then only uses the name... *)
        let lookup_key = [| ([], Miniml.Pusual (GlobRef.ConstructRef (ip, 0)), Miniml.MLaxiom) |] in
        let custom_match =
          if Table.is_custom_match lookup_key then
            Some (bytestring_of_string (Table.find_custom_match lookup_key))
          else
            None in

        let res = { Printing.re_ind_name = bytestring_of_string na;
                    Printing.re_ind_ctors = get_ctors 1;
                    Printing.re_ind_match = custom_match } in
        Some res
      else
        None
  | _ -> None

let remap_constant kn =
  let gr = locate_kn kn in
  if Table.is_custom gr && not (Table.to_inline gr) then
    Some (bytestring_of_string (Table.find_custom gr))
  else
    None

let remap_inline_constant kn =
  let gr = locate_kn kn in
  if Table.is_custom gr && Table.to_inline gr then
    Some (bytestring_of_string (Table.find_custom gr))
  else
    None

let check env evm c =
  let prog = time "Quoting" (Ast_quoter.quote_term_rec ~bypass:false env) (EConstr.to_constr evm c) in
  let remaps = { Printing.remap_inductive = remap_inductive;
                 Printing.remap_constant = remap_constant;
                 Printing.remap_inline_constant = remap_inline_constant; } in
  let do_extract _ =
    PluginExtract.extract prog remaps should_inline in
  let res = time "Extraction" do_extract () in
  Feedback.msg_info (str (string_of_bytestring (match res with | Ok s -> s | Err s -> s)))

}

VERNAC COMMAND EXTEND ConCertExtract CLASSIFIED AS QUERY
| [ "ConCert" "Extract" constr(c) ] -> {
    let env = Global.env () in
    let evm = Evd.from_env env in
    let (c, _) = Constrintern.interp_constr env evm c in
    check env evm c
  }
END

